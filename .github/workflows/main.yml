name: GitHub Actions Main
on:
  push:
    tags:
      - '*'
    branches:
      main
  pull_request:
    branches: main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  UnitTests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '18'
          cache: 'maven'
      - name: Unit Test
        run: mvn --batch-mode -Dmaven.test.failure.ignore=true test

  release-build-and-push:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    needs:
      - UnitTests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        with:
          cosign-release: 'v1.11.0'
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: user/app:latest
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

  notifyFail:
    name: "Notify Slack Channel #fail"
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    needs:
      - UnitTests
      - release-build-and-push
    steps:
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}

